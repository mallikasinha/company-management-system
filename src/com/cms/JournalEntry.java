/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cms;

import com.remittance.constant.RemittanceConstants;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.cell.PropertyValueFactory;
import javax.swing.DefaultCellEditor;
import javax.swing.table.TableColumn;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author Mallika
 */
public class JournalEntry extends javax.swing.JInternalFrame {

    private PreparedStatement stmt;
    private Connection con;
    private ResultSet rs;
    private Session session;
    private JComboBox combos[];
    private DefaultTableModel model;

    /**
     * Creates new form JournalEntry
     */
    public JournalEntry(Session session) {
        initComponents();
        this.session = session;

        model = new DefaultTableModel();
        try {
            con = Connector.getConnection();

            String sqlToGetLedgerName = "SELECT ledger_id ,ledger_name from ledger_info where company_id='" + session.getCompanyID() + "' OR company_id=0";
            stmt = con.prepareStatement(sqlToGetLedgerName);
            rs = stmt.executeQuery();

            int rowcount = journalEntryTable.getRowCount();
            combos = new JComboBox[rowcount];
            while (rs.next()) {
                String ledgerName = rs.getString("ledger_name");
                int ledgerId = rs.getInt("ledger_id");
                LedgerName ledgerNameObject = new LedgerName(ledgerName, ledgerId);

                for (int i = 0; i < rowcount; i++) {
                    if (combos[i] == null) {
                        combos[i] = new JComboBox();
                    }
                    combos[i].addItem(ledgerNameObject);
                    TableColumn col = journalEntryTable.getColumnModel().getColumn(1);
                    col.setCellEditor(new DefaultCellEditor(combos[i]));
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(JournalEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
        journalEntryTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        journalEntryTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        journalEntryTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        journalEntryTable.getColumnModel().getColumn(2).setPreferredWidth(250);
        journalEntryTable.getColumnModel().getColumn(3).setPreferredWidth(250);
        journalEntryTable.getColumnModel().getColumn(4).setPreferredWidth(300);
        Action buttonAction = new AbstractAction("Insert") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                String saveJournalEntry = "";
                saveJournalEntry(saveJournalEntry);

            }
        };

        saveJournalEntry.setAction(buttonAction);

        buttonAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);

        saveJournalEntry.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK), saveJournalEntry);

        saveJournalEntry.getActionMap().put(saveJournalEntry, buttonAction);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtVn = new javax.swing.JTextField();
        formattedTextDateAd = new javax.swing.JFormattedTextField();
        formattedTextDateBS = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        journalEntryTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        saveJournalEntry = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Journey Entry");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("V.N:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("A.D");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Date:");

        txtVn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVnActionPerformed(evt);
            }
        });
        txtVn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtVnKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtVnKeyTyped(evt);
            }
        });

        formattedTextDateAd.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        formattedTextDateAd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formattedTextDateAdKeyPressed(evt);
            }
        });

        formattedTextDateBS.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        formattedTextDateBS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formattedTextDateBSKeyPressed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("B.S");

        journalEntryTable.setAutoCreateRowSorter(true);
        journalEntryTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        journalEntryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "S.N", "Particular", "Dr", "Cr", "Narration"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        journalEntryTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                journalEntryTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                journalEntryTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(journalEntryTable);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 51, 51));
        jLabel9.setText("*");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 51, 51));
        jLabel10.setText("*");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 51, 51));
        jLabel11.setText("*");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(txtVn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(144, 144, 144)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addGap(34, 34, 34)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(formattedTextDateAd, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(formattedTextDateBS, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(260, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(formattedTextDateBS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(formattedTextDateAd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtVn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        saveJournalEntry.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        saveJournalEntry.setText("Save");
        saveJournalEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJournalEntryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(saveJournalEntry)))
                .addContainerGap(260, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(saveJournalEntry)
                .addContainerGap(164, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void txtVnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVnActionPerformed
    private int calculate() {
        Vector<Integer> myvector = new Vector();

        TableModel mode = new DefaultTableModel();
        mode = journalEntryTable.getModel();
        int n = mode.getRowCount();
        for (int i = 0; i < n; i++) {
            if (mode.getValueAt(i, 4) != null) {
                int a = (int) mode.getValueAt(i, 4);
                myvector.add(a);

            }
        }
        return myvector.size();
    }

    private String saveJournalEntry(String saveJournalEntry) {
        int count = journalEntryTable.getRowCount();
        int numofvalidrows;
        numofvalidrows = calculate();
        if (txtVn.equals("") || formattedTextDateAd == null || formattedTextDateBS.equals("") || numofvalidrows == 0) {
            JOptionPane.showMessageDialog(null, "fill all the information above");

        } else if (numofvalidrows == 0) //if the size of the vector is 0 then the jtable is empty
        {
            JOptionPane.showMessageDialog(null, "You need to add data to the table, because the table is empty");
        } else {
            try {

                con = Connector.getConnection();
                String sqlToInsertInJournalEntryHeader = "INSERT INTO journal_entry_header(vouchar_entry,date_ad,date_bs,user_id,company_id,financial_year)VALUES(?,?,?,?,?,?)";
                stmt = con.prepareStatement(sqlToInsertInJournalEntryHeader, Statement.RETURN_GENERATED_KEYS);
                stmt.setString(1, txtVn.getText());
                String date = formattedTextDateAd.getText();
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                Date parsed = format.parse(date);
                java.sql.Date sql = new java.sql.Date(parsed.getTime());
                stmt.setDate(2, sql);
                stmt.setString(3, formattedTextDateBS.getText());
                stmt.setInt(4, session.getUserId());
                stmt.setInt(5, session.getCompanyID());
                stmt.setString(6, session.getFinancialYearFrom());
                stmt.executeUpdate();
                rs = stmt.getGeneratedKeys();
                int journalEntryHeaderId = 0;
                while (rs.next()) {
                    journalEntryHeaderId = rs.getInt(1);
                }

                float drAmount = 0.0f;
                float crAmount = 0.0f;
                float total1 = 0.0f;
                float total2 = 0.0f;
                Object dr = 0.0f;
                Object cr = 0.0f;
                for (int j = 0; j < count; j++) {

                    dr = Float.parseFloat(journalEntryTable.getValueAt(j, 2).toString());
                    cr = Float.parseFloat(journalEntryTable.getValueAt(j, 3).toString());

                    total1 = (float) dr + total1;
                    total2 = (float) cr + total2;

                }
                if (total1 == total2) {
                    for (int i = 0; i < count; i++) {
                        LedgerName ledgerName = (LedgerName) combos[i].getSelectedItem();

                        Object sn = journalEntryTable.getValueAt(i, 0);
                        Object particular = journalEntryTable.getValueAt(i, 1);

                        dr = Float.parseFloat(journalEntryTable.getValueAt(i, 2).toString());
                        cr = Float.parseFloat(journalEntryTable.getValueAt(i, 3).toString());
                        Object narration = journalEntryTable.getValueAt(i, 4);

                        String sqlToInsertIntoJournalEntryTable = "INSERT INTO journal_entry_table(journal_entry_header_id,particular,dr_amount,cr_amount,narration,user_id,company_id,financial_year)VALUES(?,?,?,?,?,?,?,?)";
                        stmt = con.prepareStatement(sqlToInsertIntoJournalEntryTable);

                        stmt.setInt(1, journalEntryHeaderId);
                        stmt.setInt(2, ledgerName.getId());
                        stmt.setObject(3, dr);
                        stmt.setObject(4, cr);
                        stmt.setObject(5, narration);
                        stmt.setInt(6, session.getUserId());
                        stmt.setInt(7, session.getCompanyID());
                        stmt.setString(8, session.getFinancialYearFrom());

                        stmt.executeUpdate();

                        String sqlToGetDrCr = "SELECT dr_cr FROM ledger where particular='Opening Balance' AND ledger_id=? AND financial_year=? AND company_id=?";
                        stmt = con.prepareStatement(sqlToGetDrCr);
                        stmt.setInt(1, ledgerName.getId());
                        stmt.setString(2, session.getFinancialYearFrom());
                        stmt.setInt(3, session.getCompanyID());
                        rs = stmt.executeQuery();
                        String dr_cr = "";
                        while (rs.next()) {
                            dr_cr = rs.getString("dr_cr");

                        }
                        float currentBalance = 0.0f;
                        float newBalance = 0.0f;

                        if (dr_cr == "dr") {
                            String sqlToCalculateBalance = "SELECT SUM(dr)-SUM(cr) AS `currentbalance` from ledger WHERE ledger_id=? AND financial_year=? AND company_id=?";
                            stmt = con.prepareStatement(sqlToCalculateBalance);
                            stmt.setInt(1, ledgerName.getId());
                            stmt.setString(2, session.getFinancialYearFrom());
                            stmt.setInt(3, session.getCompanyID());
                            rs = stmt.executeQuery();
                            while (rs.next()) {
                                currentBalance = rs.getFloat("currentbalance");
                            }
                            newBalance = currentBalance + (float) dr - (float) cr;
                        } else {
                            String sqlToCalculateBalance = "SELECT SUM(cr)-SUM(dr) AS `currentbalance` from ledger WHERE ledger_id=? AND financial_year=? AND company_id=?";
                            stmt = con.prepareStatement(sqlToCalculateBalance);
                            stmt.setInt(1, ledgerName.getId());
                            stmt.setString(2, session.getFinancialYearFrom());
                            stmt.setInt(3, session.getCompanyID());
                            rs = stmt.executeQuery();
                            while (rs.next()) {
                                currentBalance = rs.getFloat("currentbalance");
                            }
                            newBalance = currentBalance + (float) cr - (float) dr;
                        }
                        if (dr == (Object) 0.0f) {
                            dr_cr = "cr";

                        } else {
                            dr_cr = "dr";

                        }

                        String sqlToInsertIntoLeder = "INSERT INTO ledger(ledger_id,date_ad,date_bs,particular,lf_no,vouchar_no,dr,cr,balance,dr_cr,company_id,user_id,financial_year,entry_date) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                        stmt = con.prepareStatement(sqlToInsertIntoLeder);
                        stmt.setInt(1, ledgerName.getId());
                        String date2 = formattedTextDateAd.getText();
                        SimpleDateFormat format2 = new SimpleDateFormat("yyyy-MM-dd");
                        Date parsed2 = format.parse(date);
                        java.sql.Date sql2 = new java.sql.Date(parsed2.getTime());
                        stmt.setDate(2, sql2);
                        stmt.setString(3, formattedTextDateBS.getText());
                        stmt.setObject(4, narration);
                        stmt.setString(5, null);
                        stmt.setString(6, txtVn.getText());
                        stmt.setObject(7, dr);
                        stmt.setObject(8, cr);
                        stmt.setFloat(9, newBalance);
                        stmt.setString(10, dr_cr);
                        stmt.setInt(11, session.getCompanyID());
                        stmt.setInt(12, session.getUserId());
                        stmt.setString(13, session.getFinancialYearFrom());
                        stmt.setTimestamp(14, getCurrentTimeStamp());
                        stmt.executeUpdate();

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "DR amount and CR amount doesnot match");
                }
            } catch (SQLException ex) {
                Logger.getLogger(RemitReceiptSendEntry.class
                        .getName()).log(Level.SEVERE, null, ex);

            } catch (ParseException ex) {
                Logger.getLogger(JournalEntry.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
        return saveJournalEntry;
    }
    private void saveJournalEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJournalEntryActionPerformed
        String saveJournalEntry = "";
        saveJournalEntry(saveJournalEntry);
    }//GEN-LAST:event_saveJournalEntryActionPerformed

    private static java.sql.Timestamp getCurrentTimeStamp() {

        java.util.Date today = new java.util.Date();
        return new java.sql.Timestamp(today.getTime());

    }


    private void journalEntryTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_journalEntryTableKeyPressed

// TODO add your handling code here:
    }//GEN-LAST:event_journalEntryTableKeyPressed

    private void txtVnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVnKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            formattedTextDateAd.requestFocus();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtVnKeyPressed

    private void txtVnKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVnKeyTyped
        if (txtVn.getText().length() >= 15) {
            evt.consume();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtVnKeyTyped

    private void formattedTextDateAdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formattedTextDateAdKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            formattedTextDateBS.requestFocus();
        }
    }//GEN-LAST:event_formattedTextDateAdKeyPressed

    private void formattedTextDateBSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formattedTextDateBSKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            journalEntryTable.requestFocus();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_formattedTextDateBSKeyPressed

    private void journalEntryTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_journalEntryTableKeyReleased


    }//GEN-LAST:event_journalEntryTableKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField formattedTextDateAd;
    private javax.swing.JFormattedTextField formattedTextDateBS;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable journalEntryTable;
    private javax.swing.JButton saveJournalEntry;
    private javax.swing.JTextField txtVn;
    // End of variables declaration//GEN-END:variables
}
