/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cms;

import java.awt.*;
import java.sql.*;
import java.util.*;
import javax.swing.*;

import java.awt.event.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import java.util.Date;

import javax.swing.table.*;
import javax.swing.table.DefaultTableModel;

import javax.swing.JButton;

/**
 *
 * @author Mallika
 */
public class Loan extends javax.swing.JInternalFrame {

    private Connection con;
    private PreparedStatement stmt;
    private ResultSet rs;
    private Session session;
    DefaultTableModel model;

    public Loan(Session session) {
        initComponents();
        this.session = session;
        try {
            con = Connector.getConnection();

            String sqlToGetLedgerName = "SELECT ledger_id ,ledger_name from ledger_info WHERE company_id='" + session.getCompanyID() + "' OR company_id=0";
            stmt = con.prepareStatement(sqlToGetLedgerName);
            rs = stmt.executeQuery();
            int ledgerId = 0;
            String ledgerName = "";
            while (rs.next()) {
                ledgerName = rs.getString("ledger_name");
                ledgerId = rs.getInt("ledger_id");

                comboLedgerName.addItem(new LedgerName(ledgerName, ledgerId));
                combo2LedgerName.addItem(new LedgerName(ledgerName, ledgerId));
            }

        } catch (SQLException ex) {
            Logger.getLogger(RemitReceiptSendEntry.class.getName()).log(Level.SEVERE, null, ex);
        }

        Action buttonAction = new AbstractAction("Enter") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                String insert = "";
                enterLoanInJtable(insert);

            }
        };

        enterToShowDataInJtable.setAction(buttonAction);

        buttonAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);

        enterToShowDataInJtable.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK), enterToShowDataInJtable);

        enterToShowDataInJtable.getActionMap().put(enterToShowDataInJtable, buttonAction);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtVN = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboLedgerName = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        bankTransactionTable = new javax.swing.JTable();
        combo2LedgerName = new javax.swing.JComboBox();
        enterToShowDataInJtable = new javax.swing.JButton();
        formatedDateAD = new javax.swing.JFormattedTextField();
        formattedDateBS = new javax.swing.JFormattedTextField();
        clearTable = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Loan And Credit");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("V.N:");

        txtVN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtVN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtVNKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtVNKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("A.D");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Date:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("B.S");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Creditors");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Deptors");

        comboLedgerName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboLedgerName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        comboLedgerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboLedgerNameActionPerformed(evt);
            }
        });
        comboLedgerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboLedgerNameKeyPressed(evt);
            }
        });

        bankTransactionTable.setAutoCreateRowSorter(true);
        bankTransactionTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bankTransactionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S.N", "Targeted Date A.D", "Targeted Date B.S", "Loan Amount", "Payment", "Interest ", "Principal", "Delay Charge", "Total", "Loan Amortization Id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        bankTransactionTable.setCursor(new java.awt.Cursor(java.awt.Cursor.SE_RESIZE_CURSOR));
        bankTransactionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bankTransactionTableMouseClicked(evt);
            }
        });
        bankTransactionTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                loanAmortizationId(evt);
            }
        });
        bankTransactionTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bankTransactionTableKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(bankTransactionTable);

        combo2LedgerName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        combo2LedgerName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        combo2LedgerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo2LedgerNameActionPerformed(evt);
            }
        });
        combo2LedgerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                combo2LedgerNameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                combo2LedgerNameKeyTyped(evt);
            }
        });

        enterToShowDataInJtable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        enterToShowDataInJtable.setText("Enter");
        enterToShowDataInJtable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterToShowDataInJtableActionPerformed(evt);
            }
        });
        enterToShowDataInJtable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                enterToShowDataInJtableKeyPressed(evt);
            }
        });

        formatedDateAD.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        formatedDateAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatedDateADActionPerformed(evt);
            }
        });
        formatedDateAD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formatedDateADKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formatedDateADKeyTyped(evt);
            }
        });

        formattedDateBS.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        formattedDateBS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formattedDateBSKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formattedDateBSKeyTyped(evt);
            }
        });

        clearTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        clearTable.setText("Clear Table");
        clearTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTableActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("*");

        jLabel8.setForeground(new java.awt.Color(255, 51, 51));
        jLabel8.setText("*");

        jLabel9.setForeground(new java.awt.Color(255, 51, 51));
        jLabel9.setText("*");

        jLabel10.setForeground(new java.awt.Color(255, 51, 51));
        jLabel10.setText("*");

        jLabel11.setForeground(new java.awt.Color(255, 51, 51));
        jLabel11.setText("*");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 939, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboLedgerName, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtVN, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(formatedDateAD, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(formattedDateBS, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combo2LedgerName, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(355, 355, 355)
                                .addComponent(enterToShowDataInJtable)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(clearTable)))))
                .addContainerGap(409, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enterToShowDataInJtable)
                            .addComponent(clearTable)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(41, 41, 41)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(combo2LedgerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(formattedDateBS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(formatedDateAD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4)
                                            .addComponent(txtVN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(jLabel1)))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(30, 30, 30)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboLedgerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bankTransactionTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bankTransactionTableKeyPressed
        con = Connector.getConnection();
        int key = evt.getKeyCode();
        if (key == KeyEvent.VK_ENTER) {
            con = Connector.getConnection();
            DefaultTableModel tableModel = (DefaultTableModel) bankTransactionTable.getModel();
            LedgerName ledgerNameIdDeptor = (LedgerName) comboLedgerName.getSelectedItem();
            LedgerName ledgerNameIdCreditor = (LedgerName) combo2LedgerName.getSelectedItem();

            {
                try {
                    int row = bankTransactionTable.getSelectedRow();

                    Object sn = bankTransactionTable.getValueAt(row, 0);
                    Object targatedDateAD = (Date) bankTransactionTable.getValueAt(row, 1);
                    Object targatedDateBS = bankTransactionTable.getValueAt(row, 2);
                    Object loanAmount = (float) bankTransactionTable.getValueAt(row, 3);
                    Object payment = (float) bankTransactionTable.getValueAt(row, 4);

                    Object interest = (float) bankTransactionTable.getValueAt(row, 5);
                    Object principle = (float) bankTransactionTable.getValueAt(row, 6);
                    Object delayCharge = (float) bankTransactionTable.getValueAt(row, 7);
                    Object total = (float) bankTransactionTable.getValueAt(row, 8);
                    Object loanAmortizationId = (int) bankTransactionTable.getValueAt(row, 9);
                    bankTransactionTable.getColumnModel().getColumn(9).setMinWidth(0);
                    bankTransactionTable.getColumnModel().getColumn(9).setMaxWidth(0);

                    if (JOptionPane.showConfirmDialog(null, "Do you want to save this data in ledger", "Save in ledger",
                            JOptionPane.YES_NO_OPTION) == JOptionPane.OK_OPTION) {
                        int ledgerId = ledgerNameIdDeptor.getId();
                        String voucharNo = txtVN.getText();
                        int companyId = session.getCompanyID();
                        int userId = session.getUserId();
                        String financialYear = session.getFinancialYearFrom();
                        //for loaner legder

                        float currentBalance = 0.0f;
                        float newBalance = 0.0f;
                        String dr_cr = "";
                        String sqlToSelectBalance = "SELECT SUM(dr)-SUM(cr) as balance from ledger where ledger_id=?";
                        stmt = con.prepareStatement(sqlToSelectBalance);
                        stmt.setInt(1, ledgerId);
                        rs = stmt.executeQuery();
                        while (rs.next()) {
                            currentBalance = rs.getFloat("balance");
                        }
                        newBalance = currentBalance - (float) principle;
                        if (newBalance < 0.0f) {
                            dr_cr = "Cr";

                        } else {
                            dr_cr = "Dr";
                        }

                        String sqlToInsertInLedger = "  INSERT INTO ledger(ledger_id, date_ad, date_bs, vouchar_no, dr, cr,balance, dr_cr, company_id, user_id, financial_year, entry_date) VALUES(?,?,?,?,?,?,?,?,?,?,?,? )";
                        stmt = con.prepareStatement(sqlToInsertInLedger);
                        stmt.setInt(1, ledgerId);
                        String dates = formatedDateAD.getText();
                        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                        Date parse = format.parse(dates);
                        java.sql.Date loanDateInAD = new java.sql.Date(parse.getTime());
                        Date dateAD = loanDateInAD;
                        stmt.setDate(2, loanDateInAD);
                        stmt.setString(3, formattedDateBS.getText());
                        stmt.setString(4, voucharNo);
                        stmt.setFloat(5, 0.0f);
                        stmt.setObject(6, principle);
                        stmt.setFloat(7, newBalance);
                        stmt.setString(8, dr_cr);
                        stmt.setInt(9, companyId);
                        stmt.setInt(10, userId);
                        stmt.setString(11, financialYear);
                        stmt.setTimestamp(12, getCurrentTimeStamp());
                        stmt.executeUpdate();
                        //FOR INTEREST LEDGER
//•	COMPUTE current balance by using this query
//•	SELECT SUM(cr)-SUM(dr) as balance from ledger where ledger_id=1 // ledger id for interest ledger is always 1
//•	SET current balance = balance(which comes from above table)
//•	COMPUTE new balance = current balance-principal amount
//•	IF new balance < 0 THEN
//•	SET dr_cr =  Dr
//•	ELSE
//•	SET dr_cr = Cr
//•	END IF
                        String sqlToComputeCurrentBalanceforInterestLdger = "SELECT SUM(cr)-SUM(dr) as balance from ledger where ledger_id=1 ";
                        stmt = con.prepareStatement(sqlToComputeCurrentBalanceforInterestLdger);
                        rs = stmt.executeQuery();
                        while (rs.next()) {
                            currentBalance = rs.getInt("balance");
                        }
                        newBalance = currentBalance - (float) principle;
                        if (newBalance < 0) {
                            dr_cr = "Dr";
                        } else {
                            dr_cr = "Cr";
                        }
//                        INSERT into  ledger: INSERT INTO ledger(ledger_id, date_ad, date_bs,particular, vouchar_no, dr, cr,balance, dr_cr, company_id, user_id, financial_year, entry_date) VALUES
//(ledger id, date ad, date bs,”Interest” vouchar number, 0, interest, new balance, dr_cr, company id, user id, financial year, now())
                        String particular = "Interest";
                        String sqlToInsertInInterestLedger = "INSERT INTO ledger(ledger_id, date_ad, date_bs,particular, vouchar_no, dr, cr,balance, dr_cr, company_id, user_id, financial_year, entry_date) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";
                        stmt = con.prepareStatement(sqlToInsertInInterestLedger);
                        stmt.setInt(1, ledgerId);
                        String date = formatedDateAD.getText();
                        SimpleDateFormat formats = new SimpleDateFormat("yyyy-MM-dd");
                        Date parses = formats.parse(date);
                        java.sql.Date loanDateAD = new java.sql.Date(parses.getTime());
                        stmt.setDate(2, loanDateAD);
                        stmt.setString(3, formattedDateBS.getText());
                        stmt.setString(4, particular);
                        stmt.setString(5, voucharNo);
                        stmt.setFloat(6, 0.0f);
                        stmt.setObject(7, principle);
                        stmt.setFloat(8, newBalance);
                        stmt.setString(9, dr_cr);
                        stmt.setInt(10, companyId);
                        stmt.setInt(11, userId);
                        stmt.setString(12, financialYear);
                        stmt.setTimestamp(13, getCurrentTimeStamp());
                        stmt.executeUpdate();
                        /*Update loan amortization  row to set paying status 1
	UPDATE loan_amortization SET paying_status = 1 WHERE loan_amortization_id = loan_amortization_id*/

                        String sqlToUpdateLoanAmortizationTable = "UPDATE loan_amortization SET paying_status = 1 WHERE loan_amortization_id = ?";
                        stmt = con.prepareStatement(sqlToUpdateLoanAmortizationTable);;
                        stmt.setObject(1, loanAmortizationId);
                        stmt.executeUpdate();

                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "error");
                    System.err.println(e);
                }
//for creditor
                try {
                    int row = bankTransactionTable.getSelectedRow();

                    Object sn = bankTransactionTable.getValueAt(row, 0);
                    Object targatedDateAD = (Date) bankTransactionTable.getValueAt(row, 1);
                    Object targatedDateBS = bankTransactionTable.getValueAt(row, 2);
                    Object loanAmount = (float) bankTransactionTable.getValueAt(row, 3);
                    Object payment = (float) bankTransactionTable.getValueAt(row, 4);

                    Object interest = (float) bankTransactionTable.getValueAt(row, 5);
                    Object principle = (float) bankTransactionTable.getValueAt(row, 6);
                    Object delayCharge = (float) bankTransactionTable.getValueAt(row, 7);
                    Object total = (float) bankTransactionTable.getValueAt(row, 8);
                    Object loanAmortizationId = (int) bankTransactionTable.getValueAt(row, 9);
                    bankTransactionTable.getColumnModel().getColumn(9).setMinWidth(0);
                    bankTransactionTable.getColumnModel().getColumn(9).setMaxWidth(0);

                    if (JOptionPane.showConfirmDialog(null, "Do you want to save this data in ledger", "Save in ledger",
                            JOptionPane.YES_NO_OPTION) == JOptionPane.OK_OPTION) {
                        int ledgerId = ledgerNameIdCreditor.getId();
                        String voucharNo = txtVN.getText();
                        int companyId = session.getCompanyID();
                        int userId = session.getUserId();
                        String financialYear = session.getFinancialYearFrom();
                        //for loaner legder

                        float currentBalance = 0.0f;
                        float newBalance = 0.0f;
                        String dr_cr = "";
                        String sqlToSelectBalance = "SELECT SUM(cr)-SUM(dr) as balance from ledger where ledger_id=?";
                        stmt = con.prepareStatement(sqlToSelectBalance);
                        stmt.setInt(1, ledgerId);
                        rs = stmt.executeQuery();
                        while (rs.next()) {
                            currentBalance = rs.getFloat("balance");
                        }
                        newBalance = currentBalance - (float) principle;
                        if (newBalance < 0.0f) {
                            dr_cr = "Cr";

                        } else {
                            dr_cr = "Dr";
                        }

                        String sqlToInsertInLedger = "  INSERT INTO ledger(ledger_id, date_ad, date_bs, vouchar_no, dr, cr,balance, dr_cr, company_id, user_id, financial_year, entry_date) VALUES(?,?,?,?,?,?,?,?,?,?,?,? )";
                        stmt = con.prepareStatement(sqlToInsertInLedger);
                        stmt.setInt(1, ledgerId);
                        String dates = formatedDateAD.getText();
                        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                        Date parse = format.parse(dates);
                        java.sql.Date loanDateInAD = new java.sql.Date(parse.getTime());
                        Date dateAD = loanDateInAD;
                        stmt.setDate(2, loanDateInAD);
                        stmt.setString(3, formattedDateBS.getText());
                        stmt.setString(4, voucharNo);
                        stmt.setFloat(5, 0.0f);
                        stmt.setObject(6, principle);
                        stmt.setFloat(7, newBalance);
                        stmt.setString(8, dr_cr);
                        stmt.setInt(9, companyId);
                        stmt.setInt(10, userId);
                        stmt.setString(11, financialYear);
                        stmt.setTimestamp(12, getCurrentTimeStamp());
                        stmt.executeUpdate();
                        //FOR INTEREST LEDGER
//•	COMPUTE current balance by using this query
//•	SELECT SUM(cr)-SUM(dr) as balance from ledger where ledger_id=1 // ledger id for interest ledger is always 1
//•	SET current balance = balance(which comes from above table)
//•	COMPUTE new balance = current balance-principal amount
//•	IF new balance < 0 THEN
//•	SET dr_cr =  Dr
//•	ELSE
//•	SET dr_cr = Cr
//•	END IF
                        String sqlToComputeCurrentBalanceforInterestLdger = "SELECT SUM(dr)-SUM(cr) as balance from ledger where ledger_id=1 ";
                        stmt = con.prepareStatement(sqlToComputeCurrentBalanceforInterestLdger);
                        rs = stmt.executeQuery();
                        while (rs.next()) {
                            currentBalance = rs.getInt("balance");
                        }
                        newBalance = currentBalance - (float) principle;
                        if (newBalance < 0) {
                            dr_cr = "Cr";
                        } else {
                            dr_cr = "Dr";
                        }
//                        INSERT into  ledger: INSERT INTO ledger(ledger_id, date_ad, date_bs,particular, vouchar_no, dr, cr,balance, dr_cr, company_id, user_id, financial_year, entry_date) VALUES
//(ledger id, date ad, date bs,”Interest” vouchar number, 0, interest, new balance, dr_cr, company id, user id, financial year, now())
                        String particular = "Interest";
                        String sqlToInsertInInterestLedger = "INSERT INTO ledger(ledger_id, date_ad, date_bs,particular, vouchar_no, dr, cr,balance, dr_cr, company_id, user_id, financial_year, entry_date) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";
                        stmt = con.prepareStatement(sqlToInsertInInterestLedger);
                        stmt.setInt(1, ledgerId);
                        String date = formatedDateAD.getText();
                        SimpleDateFormat formats = new SimpleDateFormat("yyyy-MM-dd");
                        Date parses = formats.parse(date);
                        java.sql.Date loanDateAD = new java.sql.Date(parses.getTime());
                        stmt.setDate(2, loanDateAD);
                        stmt.setString(3, formattedDateBS.getText());
                        stmt.setString(4, particular);
                        stmt.setString(5, voucharNo);
                        stmt.setFloat(6, 0.0f);
                        stmt.setObject(7, principle);
                        stmt.setFloat(8, newBalance);
                        stmt.setString(9, dr_cr);
                        stmt.setInt(10, companyId);
                        stmt.setInt(11, userId);
                        stmt.setString(12, financialYear);
                        stmt.setTimestamp(13, getCurrentTimeStamp());
                        stmt.executeUpdate();
                        /*Update loan amortization  row to set paying status 1
	UPDATE loan_amortization SET paying_status = 1 WHERE loan_amortization_id = loan_amortization_id*/

                        String sqlToUpdateLoanAmortizationTable = "UPDATE loan_amortization SET paying_status = 1 WHERE loan_amortization_id = ?";
                        stmt = con.prepareStatement(sqlToUpdateLoanAmortizationTable);;
                        stmt.setObject(1, loanAmortizationId);
                        stmt.executeUpdate();

                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "error");
                    System.err.println(e);
                }
            }
            tableModel.fireTableDataChanged();
        }
    }//GEN-LAST:event_bankTransactionTableKeyPressed
    private static java.sql.Timestamp getCurrentTimeStamp() {

        java.util.Date today = new java.util.Date();
        return new java.sql.Timestamp(today.getTime());

    }

    private String enterLoanInJtable(String enterLoan) {

        DefaultTableModel model = (DefaultTableModel) bankTransactionTable.getModel();
        int rowCounter = 0;

        int numberOfRows = bankTransactionTable.getRowCount();

        if (bankTransactionTable.getRowCount() > 0) {
            for (rowCounter = 0; rowCounter <= numberOfRows; rowCounter++) {
                model.removeRow(rowCounter / numberOfRows);

            }

        }
        String vn = txtVN.getText();
        String dateAd = formatedDateAD.getText();
        String dateBs = formattedDateBS.getText();

        if (("".equals(vn)) || ("".equals(dateAd)) || ("".equals(dateBs))) {
            JOptionPane.showMessageDialog(null, "fill the required field ");

        } else {

            try {
                LedgerName ledgerNameId = (LedgerName) comboLedgerName.getSelectedItem();

                int ledgerId = ledgerNameId.getId();
                String dateBS = formattedDateBS.getText();
                int companyId = session.getCompanyID();
                String economicYear = session.getFinancialYearFrom();
                String date = formatedDateAD.getText();
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                Date parsed = format.parse(date);
                java.sql.Date loanDateInAD = new java.sql.Date(parsed.getTime());
                String sqlToSelectLoanAmortizationHeaderId = " SELECT header_id, loan_amount, interest_rate from loan_amortization_header where ledger_id = ? and company_id = ? and paying_status = 0";
                stmt = con.prepareStatement(sqlToSelectLoanAmortizationHeaderId);
                stmt.setInt(1, ledgerId);
                stmt.setInt(2, companyId);
                rs = stmt.executeQuery();
                int headerId = 0;
                int interestRate = 0;
                float principalAmountMain = 0.0f;

                while (rs.next()) {
                    headerId = rs.getInt("header_id");
                    interestRate = rs.getInt("interest_rate");
                    principalAmountMain = rs.getFloat("loan_amount");
                }
                String sqlToSelectLoanAmortizationList = " SELECT * FROM loan_amortization where loan_amortization_header_id = ? AND paying_status=0";
                stmt = con.prepareStatement(sqlToSelectLoanAmortizationList);
                stmt.setInt(1, headerId);
                rs = stmt.executeQuery();
                Date targetDate = null;
                int payingStatus = 0;
                float payment = 0.0f;
                float loanAmount = 0.0f;
                float principalAmount = 0.0f;
                float interest = 0.0f;
                int counter = 1;
                int firstPayingStatus = 0;
                int loan_amortization_id = 0;
                while (rs.next()) {
                    loan_amortization_id = rs.getInt("loan_amortization_id");
                    payingStatus = rs.getInt("paying_status");
                    payment = rs.getFloat("payment");

                    targetDate = rs.getDate("target_date_ad");
                    loanAmount = rs.getFloat("loan_amount");
                    principalAmount = rs.getFloat("principal_amount");
                    interest = rs.getFloat("interest");

                    float delayCharge = 0.0f;
                    float interestForOneDay = 0.0f;
                    float roundOffInterestRateOfOneDay = 0.0f;
                    float total = 0.0f;
                    long differencebetweenDateAD$TargetDate = 0;
                    if (targetDate.before(loanDateInAD) && payingStatus == 0 && firstPayingStatus == 0) {

                        interestForOneDay = (principalAmountMain * 1 * interestRate) / (365 * 100);
                        roundOffInterestRateOfOneDay = (float) Math.round(interestForOneDay * 100) / 100;

                        differencebetweenDateAD$TargetDate = (loanDateInAD.getTime() - targetDate.getTime()) / 86400000;

                        delayCharge = differencebetweenDateAD$TargetDate * roundOffInterestRateOfOneDay;
                        total = payment + delayCharge;
                        firstPayingStatus = 1 + firstPayingStatus;

                    } else {
                        delayCharge = 0;
                    }

                    model.addRow(new Object[]{counter++, targetDate, dateBS, loanAmount, payment, interest, principalAmount, delayCharge, total, loan_amortization_id});
                    bankTransactionTable.setModel(model);
                }
                JOptionPane.showMessageDialog(null, "Inserted Successfully ");

            } catch (ParseException ex) {
                Logger.getLogger(Loan.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Loan.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return enterLoan;
    }
    private void enterToShowDataInJtableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterToShowDataInJtableActionPerformed

        String dataInTable = "";
        enterLoanInJtable(dataInTable);


    }//GEN-LAST:event_enterToShowDataInJtableActionPerformed

    private void bankTransactionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bankTransactionTableMouseClicked
        con = Connector.getConnection();
        {
            try {
                int count = bankTransactionTable.getRowCount();

                for (int i = 0; i < count; i++) {
                    Object sn = bankTransactionTable.getValueAt(i, 0);
                    Object targatedDateAD = (Date) bankTransactionTable.getValueAt(i, 1);
                    Object targatedDateBS = bankTransactionTable.getValueAt(i, 2);
                    Object loanAmount = (float) bankTransactionTable.getValueAt(i, 3);
                    Object payment = (float) bankTransactionTable.getValueAt(i, 4);

                    Object interest = (float) bankTransactionTable.getValueAt(i, 5);
                    Object principle = (float) bankTransactionTable.getValueAt(i, 6);
                    Object delayCharge = (float) bankTransactionTable.getValueAt(i, 7);
                    Object total = (float) bankTransactionTable.getValueAt(i, 8);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "error de deplacemnt" + e.getLocalizedMessage());
            }

        }
    }//GEN-LAST:event_bankTransactionTableMouseClicked

    private void loanAmortizationId(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_loanAmortizationId

    }//GEN-LAST:event_loanAmortizationId

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void clearTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTableActionPerformed
        DefaultTableModel dm = (DefaultTableModel) bankTransactionTable.getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged();
    }//GEN-LAST:event_clearTableActionPerformed

    private void formatedDateADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatedDateADActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatedDateADActionPerformed

    private void combo2LedgerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo2LedgerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo2LedgerNameActionPerformed

    private void txtVNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVNKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            formatedDateAD.requestFocus();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVNKeyPressed

    private void formattedDateBSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formattedDateBSKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            combo2LedgerName.requestFocus();
        } // TODO add your handling code here:
    }//GEN-LAST:event_formattedDateBSKeyPressed

    private void formatedDateADKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formatedDateADKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            formattedDateBS.requestFocus();
        } // TODO add your handling code here:
    }//GEN-LAST:event_formatedDateADKeyPressed

    private void combo2LedgerNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_combo2LedgerNameKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            comboLedgerName.requestFocus();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_combo2LedgerNameKeyPressed

    private void comboLedgerNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboLedgerNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            enterToShowDataInJtable.requestFocus();
        }   // TODO add your handling code here:
    }//GEN-LAST:event_comboLedgerNameKeyPressed

    private void enterToShowDataInJtableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_enterToShowDataInJtableKeyPressed
        String dataInTable = "";
        enterLoanInJtable(dataInTable);        // TODO add your handling code here:
    }//GEN-LAST:event_enterToShowDataInJtableKeyPressed

    private void txtVNKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVNKeyTyped
        if (txtVN.getText().length() >= 30) {
            evt.consume();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtVNKeyTyped

    private void formatedDateADKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formatedDateADKeyTyped
        if (formatedDateAD.getText().length() >= 30) {
            evt.consume();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_formatedDateADKeyTyped

    private void formattedDateBSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formattedDateBSKeyTyped
        if (formattedDateBS.getText().length() >= 30) {
            evt.consume();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_formattedDateBSKeyTyped

    private void combo2LedgerNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_combo2LedgerNameKeyTyped

        // TODO add your handling code here:
    }//GEN-LAST:event_combo2LedgerNameKeyTyped

    private void comboLedgerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboLedgerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboLedgerNameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bankTransactionTable;
    private javax.swing.JButton clearTable;
    private javax.swing.JComboBox combo2LedgerName;
    private javax.swing.JComboBox comboLedgerName;
    private javax.swing.JButton enterToShowDataInJtable;
    private javax.swing.JFormattedTextField formatedDateAD;
    private javax.swing.JFormattedTextField formattedDateBS;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtVN;
    // End of variables declaration//GEN-END:variables

}
