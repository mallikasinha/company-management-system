/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cms;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import javax.swing.table.TableModel;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;

/**
 *
 * @author Mallika
 */
public class RemitReceiptSendEntry extends javax.swing.JInternalFrame {

    private PreparedStatement stmt;
    private Connection con;
    DefaultTableModel model;
    private Session session;
    private ResultSet rs;
    private int ledgerId = 0;
    private String ledgerName = "";

    public RemitReceiptSendEntry(Session session) {
        initComponents();
        this.session = session;
        try {
            con = Connector.getConnection();

            String sqlToGetRemitName = "SELECT remit_name ,remit_id from remit";
            stmt = con.prepareStatement(sqlToGetRemitName);
            rs = stmt.executeQuery();
            String remitsName = "";
            int remitId = 0;

            while (rs.next()) {
                remitsName = rs.getString("remit_name");
                remitId = rs.getInt("remit_id");
                // ledger = Integer.toString(ledgerGroupId);

                comboRemit.addItem(new RemitName(remitsName, remitId));
            }

        } catch (SQLException ex) {
            Logger.getLogger(RemitReceiptSendEntry.class.getName()).log(Level.SEVERE, null, ex);
        }

        String ledgerName = "";
        ledgerName(ledgerName);
        ButtonGroup cashGroup = new ButtonGroup();
        cashGroup.add(radioCash);
        cashGroup.add(radioCredit);

        ButtonGroup group = new ButtonGroup();

        group.add(radioButtonRS);
        group.add(jRadioButtonSent);
        remitreceiptsend.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        remitreceiptsend.getColumnModel().getColumn(0).setPreferredWidth(35);
        remitreceiptsend.getColumnModel().getColumn(1).setPreferredWidth(170);
        remitreceiptsend.getColumnModel().getColumn(2).setPreferredWidth(170);
        remitreceiptsend.getColumnModel().getColumn(3).setPreferredWidth(170);
        remitreceiptsend.getColumnModel().getColumn(4).setPreferredWidth(170);
        remitreceiptsend.getColumnModel().getColumn(5).setPreferredWidth(170);

        remitreceiptsend.getColumnModel().getColumn(6).setPreferredWidth(170);
        remitreceiptsend.getColumnModel().getColumn(7).setPreferredWidth(170);
        Action buttonAction = new AbstractAction("Insert") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                String insert = "";
                try {
                    insertRemitReceiptEntry(insert);

                } catch (ParseException ex) {
                    Logger.getLogger(RemitReceiptSendEntry.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

            }
        };

        save.setAction(buttonAction);

        buttonAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);

        save.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK), save);

        save.getActionMap().put(save, buttonAction);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel1 = new javax.swing.JLabel();
        txtVoucharNumber = new javax.swing.JTextField();
        Date = new javax.swing.JLabel();
        Date1 = new javax.swing.JLabel();
        Date2 = new javax.swing.JLabel();
        Date3 = new javax.swing.JLabel();
        Date4 = new javax.swing.JLabel();
        Date5 = new javax.swing.JLabel();
        comboRemit = new javax.swing.JComboBox();
        Date6 = new javax.swing.JLabel();
        Date7 = new javax.swing.JLabel();
        Date8 = new javax.swing.JLabel();
        radioCredit = new javax.swing.JRadioButton();
        radioCash = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        comboLedger = new javax.swing.JComboBox();
        radioButtonRS = new javax.swing.JRadioButton();
        jRadioButtonSent = new javax.swing.JRadioButton();
        formatedDateAd = new javax.swing.JFormattedTextField();
        formatedDateBs = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        remitreceiptsend = new javax.swing.JTable();
        save = new javax.swing.JButton();
        Date9 = new javax.swing.JLabel();
        Date10 = new javax.swing.JLabel();
        Date11 = new javax.swing.JLabel();
        Date12 = new javax.swing.JLabel();
        Date13 = new javax.swing.JLabel();
        Date14 = new javax.swing.JLabel();
        Date15 = new javax.swing.JLabel();
        Date16 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Remit Receipt/Send Entry");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Vouchar number:");

        txtVoucharNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtVoucharNumberKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtVoucharNumberKeyTyped(evt);
            }
        });

        Date.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date.setText("A.D");

        Date1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date1.setText("Date:");

        Date2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date2.setText("B.S");

        Date3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date3.setText("Credit:");

        Date4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date4.setText("Ledger Name:");

        Date5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date5.setText("Remit:");

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${remitName}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, comboRemit, eLProperty, comboRemit);
        bindingGroup.addBinding(jComboBoxBinding);

        comboRemit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboRemitKeyPressed(evt);
            }
        });

        Date6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date6.setText("Sent:");

        Date7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date7.setText("Receipt:");

        Date8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date8.setText("Cash:");

        radioCredit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioCreditActionPerformed(evt);
            }
        });
        radioCredit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                radioCreditKeyPressed(evt);
            }
        });

        radioCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioCashActionPerformed(evt);
            }
        });
        radioCash.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                radioCashKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1352, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        comboLedger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboLedgerActionPerformed(evt);
            }
        });
        comboLedger.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboLedgerKeyPressed(evt);
            }
        });

        radioButtonRS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonRSActionPerformed(evt);
            }
        });
        radioButtonRS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                radioButtonRSKeyPressed(evt);
            }
        });

        jRadioButtonSent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSentActionPerformed(evt);
            }
        });
        jRadioButtonSent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jRadioButtonSentKeyPressed(evt);
            }
        });

        formatedDateAd.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        formatedDateAd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formatedDateAdKeyPressed(evt);
            }
        });

        formatedDateBs.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        formatedDateBs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formatedDateBsKeyPressed(evt);
            }
        });

        remitreceiptsend.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        remitreceiptsend.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "S.N", "Client Name", "Location", "ID Proof", "Remit ID", "Amount", "Commision", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        remitreceiptsend.setCellSelectionEnabled(true);
        remitreceiptsend.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        remitreceiptsend.setOpaque(false);
        remitreceiptsend.setSelectionBackground(new java.awt.Color(255, 255, 255));
        remitreceiptsend.setSelectionForeground(new java.awt.Color(0, 0, 102));
        remitreceiptsend.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                remitreceiptsendFocusLost(evt);
            }
        });
        remitreceiptsend.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                remitreceiptsendKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                remitreceiptsendKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                remitreceiptsendKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(remitreceiptsend);

        save.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        Date9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date9.setForeground(new java.awt.Color(255, 0, 51));
        Date9.setText("*");

        Date10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date10.setForeground(new java.awt.Color(255, 0, 51));
        Date10.setText("*");

        Date11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date11.setForeground(new java.awt.Color(255, 0, 51));
        Date11.setText("*");

        Date12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date12.setForeground(new java.awt.Color(255, 0, 51));
        Date12.setText("*");

        Date13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date13.setForeground(new java.awt.Color(255, 0, 51));
        Date13.setText("*");

        Date14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date14.setForeground(new java.awt.Color(255, 0, 51));
        Date14.setText("*");

        Date15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date15.setForeground(new java.awt.Color(255, 0, 51));
        Date15.setText("*");

        Date16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Date16.setForeground(new java.awt.Color(255, 0, 51));
        Date16.setText("*");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(Date9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Date4)
                                .addGap(18, 18, 18)
                                .addComponent(comboLedger, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(162, 162, 162)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Date14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Date13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Date8)
                                    .addComponent(Date3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radioCredit)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(radioCash)
                                                .addGap(192, 192, 192)
                                                .addComponent(Date12, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(Date11, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Date7)
                                            .addComponent(Date6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtVoucharNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(Date10, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(Date1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(formatedDateAd, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(Date15, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Date2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(formatedDateBs, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonSent)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radioButtonRS)
                                .addGap(29, 29, 29)
                                .addComponent(Date16, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Date5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboRemit, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(save)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1198, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(radioButtonRS)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtVoucharNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Date1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(formatedDateAd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Date2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(formatedDateBs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Date7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Date9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Date11, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Date15, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Date10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboRemit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Date5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Date16, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Date4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboLedger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButtonSent, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Date6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Date12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 3, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Date13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(radioCash, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Date8, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Date3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Date14, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(radioCredit))))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(save)
                .addGap(84, 84, 84)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioCashActionPerformed
        if (radioCash.isSelected()) {
            comboLedger.removeAllItems();
        }

// TODO add your handling code here:
    }//GEN-LAST:event_radioCashActionPerformed

    public boolean isCellEditable(int row, int column) {
        return false;

    }

    public void setValueAt(Object toTal, int row, int column) {
        setValueAt(toTal, row, column);
        fireTableCellUpdated(row, 7);

        //remitreceiptsend.setModel(model);
    }

    private int calculate() {
        Vector<Integer> myvector = new Vector();

        TableModel mode = new DefaultTableModel();
        mode = remitreceiptsend.getModel();
        int n = mode.getRowCount();
        for (int i = 0; i < n; i++) {
            if (mode.getValueAt(i, 7) != null) {
                int a = (int) (float) (mode.getValueAt(i, 7));
                myvector.add((a));
            }

        }
        return myvector.size();

    }

    private String insertRemitReceiptEntry(String insertRemitReceiptEntry) throws ParseException {
        con = Connector.getConnection();

        int numofvalidrows = 0;
        String voucharNumber = txtVoucharNumber.getText();
        String dateAd = formatedDateAd.getText();
        String dateBs = formatedDateBs.getText();
        numofvalidrows = calculate();

        if ((voucharNumber == "") || (dateAd == "") || (dateBs == "")) {
            JOptionPane.showMessageDialog(null, "fill all the information above");
        } else if (numofvalidrows == 0) {
            JOptionPane.showMessageDialog(null, "fill all the information above");
        } else {
            try {
                String type = "";
                String paymentType = "";
                if (radioButtonRS.isSelected()) {
                    type = "receipt";
                } else if (jRadioButtonSent.isSelected()) {
                    type = "sent";
                }

                if (radioCash.isSelected()) {
                    paymentType = "cash";
                } else if (radioCredit.isSelected()) {
                    paymentType = "credit";
                }

                RemitName remitNameId = (RemitName) comboRemit.getSelectedItem();
                LedgerName ledgerNameId = (LedgerName) comboLedger.getSelectedItem();

                String sqlToInsertInRemitReceiptEntry = "INSERT INTO remit_receipt_entry(vouchar_number,date_ad,date_bs,type,remit_id,ledger_id,payment_type,company_id,user_id,financial_year) VALUES(?,?,?,?,?,?,?,?,?,?)";
                stmt = con.prepareStatement(sqlToInsertInRemitReceiptEntry, Statement.RETURN_GENERATED_KEYS);
                stmt.setString(1, txtVoucharNumber.getText());
                String date = formatedDateAd.getText();
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                Date parsed = format.parse(date);
                java.sql.Date dateInAd = new java.sql.Date(parsed.getTime());
                stmt.setDate(2, dateInAd);

                stmt.setString(3, formatedDateBs.getText());
                stmt.setString(4, type);
                stmt.setInt(5, remitNameId.getId());
                stmt.setInt(6, ledgerNameId.getId());
                stmt.setString(7, paymentType);
                stmt.setInt(8, session.getCompanyID());
                stmt.setInt(9, session.getUserId());
                stmt.setString(10, session.getFinancialYearFrom());
                stmt.executeUpdate();
                rs = stmt.getGeneratedKeys();
                int remitHeaderId = 0;

                while (rs.next()) {
                    remitHeaderId = rs.getInt(1);
                }
                int count = remitreceiptsend.getRowCount();
                int col = remitreceiptsend.getColumnCount();

                for (int i = 0; i < count; i++) {
                    Object sn = remitreceiptsend.getValueAt(i, 0);
                    Object name = remitreceiptsend.getValueAt(i, 1);
                    Object place = remitreceiptsend.getValueAt(i, 2);
                    Object idProof = remitreceiptsend.getValueAt(i, 3);
                    Object remitId = remitreceiptsend.getValueAt(i, 4);

                    Object amount = (float) remitreceiptsend.getValueAt(i, 5);
                    Object commision = (float) remitreceiptsend.getValueAt(i, 6);
                    Object total = (float) remitreceiptsend.getValueAt(i, 7);
                    if (name != null || place != null || idProof != null || remitId != null || amount != null || commision != null || total != null) {
                        String sqlToInsertInRemitReceiptEntryTable = "INSERT INTO remit_receipt_entry_table(remit_header_id,client_name,location,id_proof,remit_id,amount,commission,total,company_id,user_id,financial_year)VALUES(?,?,?,?,?,?,?,?,?,?,?)";
                        stmt = con.prepareStatement(sqlToInsertInRemitReceiptEntryTable);

                        stmt.setInt(1, remitHeaderId);
                        stmt.setObject(2, name);
                        stmt.setObject(3, place);
                        stmt.setObject(4, idProof);
                        stmt.setObject(5, remitId);
                        stmt.setObject(6, amount);
                        stmt.setObject(7, commision);
                        stmt.setObject(8, total);
                        stmt.setInt(9, session.getCompanyID());
                        stmt.setInt(10, session.getUserId());
                        stmt.setString(11, session.getFinancialYearFrom());
                        stmt.executeUpdate();

                        String dr_cr = "";
                        float drAmount = 0.0f;
                        float crAmount = 0.0f;
                        float balance = 0.0f;
                        if (type.equals("receipt")) {
                            drAmount = (float) total;
                            crAmount = 0.0f;
                            dr_cr = "dr";
                        } else {
                            crAmount = (float) total;
                            drAmount = 0.0f;
                            dr_cr = "cr";
                        }

                        String sqlToGetCurrentBalance = " SELECT SUM(dramount)-SUM(cramount) as balance FROM remit_ledger WHERE company_id=? and financial_year=? AND remit_id=?";
                        stmt = con.prepareStatement(sqlToGetCurrentBalance);
                        stmt.setInt(1, session.getCompanyID());
                        stmt.setString(2, session.getFinancialYearFrom());
                        stmt.setInt(3, remitNameId.getId());
                        float currentBalance = 0.0f;
                        while (rs.next()) {
                            currentBalance = rs.getFloat("balance");
                        }

                        stmt.executeQuery();

                        balance = (currentBalance + drAmount) - crAmount;
                        String sqlToInsertInRemitLedger = "INSERT INTO remit_ledger( remit_id,date_ad,date_bs,particular,lfno,vno,control_id,dramount,cramount,balance,company_id,user_id,financial_year,insert_date) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?) ";
                        stmt = con.prepareStatement(sqlToInsertInRemitLedger);
                        stmt.setInt(1, remitNameId.getId());
                        String dates = formatedDateAd.getText();
                        SimpleDateFormat formats = new SimpleDateFormat("yyyy-MM-dd");
                        Date parseds = format.parse(dateAd);
                        java.sql.Date dateIAd = new java.sql.Date(parsed.getTime());
                        stmt.setDate(2, dateIAd);
                        stmt.setString(3, formatedDateBs.getText());
                        stmt.setObject(4, name);
                        stmt.setString(5, "");
                        stmt.setString(6, txtVoucharNumber.getText());
                        stmt.setObject(7, remitId);
                        stmt.setFloat(8, drAmount);
                        stmt.setFloat(9, crAmount);
                        stmt.setFloat(10, balance);
                        stmt.setInt(11, session.getCompanyID());
                        stmt.setInt(12, session.getUserId());
                        stmt.setString(13, session.getFinancialYearFrom());
                        stmt.setTimestamp(14, getCurrentTimeStamp());
                        stmt.executeUpdate();

                        String sqlToInsertInLedger = "INSERT INTO ledger(ledger_id,date_ad,date_bs,particular,lf_no,vouchar_no,dr,cr,balance,dr_cr,company_id,user_id,financial_year,entry_date)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                        stmt = con.prepareStatement(sqlToInsertInLedger);
                        stmt.setInt(1, ledgerNameId.getId());
                        String dat = this.formatedDateAd.getText();
                        SimpleDateFormat formatd = new SimpleDateFormat("yyyy-MM-dd");
                        Date parsedd = format.parse(date);
                        java.sql.Date datead = new java.sql.Date(parsed.getTime());
                        stmt.setDate(2, datead);
                        stmt.setString(3, formatedDateBs.getText());
                        stmt.setObject(4, name + "(" + remitId + ")".toString());
                        stmt.setString(5, "");
                        stmt.setString(6, txtVoucharNumber.getText());
                        stmt.setFloat(7, drAmount);
                        stmt.setFloat(8, crAmount);
                        stmt.setFloat(9, balance);
                        stmt.setString(10, dr_cr);
                        stmt.setInt(11, session.getCompanyID());
                        stmt.setInt(12, session.getUserId());
                        stmt.setString(13, session.getFinancialYearFrom());
                        stmt.setTimestamp(14, getCurrentTimeStamp());
                        stmt.executeUpdate();

                    }
                    JOptionPane.showMessageDialog(null, "Inserted Successfully ");

                }
            } catch (SQLException ex) {
                Logger.getLogger(RemitReceiptSendEntry.class
                        .getName()).log(Level.SEVERE, null, ex);

            } catch (ParseException ex) {
                Logger.getLogger(RemitReceiptSendEntry.class
                        .getName()).log(Level.SEVERE, null, ex);

            }
        }

        return insertRemitReceiptEntry;
    }
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        String saveRemitReciptEntry = "";
        try {
            insertRemitReceiptEntry(saveRemitReciptEntry);

        } catch (ParseException ex) {
            Logger.getLogger(RemitReceiptSendEntry.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_saveActionPerformed

    private static java.sql.Timestamp getCurrentTimeStamp() {

        java.util.Date today = new java.util.Date();
        return new java.sql.Timestamp(today.getTime());

    }


    private void remitreceiptsendKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_remitreceiptsendKeyPressed

    }//GEN-LAST:event_remitreceiptsendKeyPressed

    private void remitreceiptsendKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_remitreceiptsendKeyReleased
        int rowIndex = remitreceiptsend.getSelectedRow();
        int colIndex = remitreceiptsend.getSelectedColumn();
        float amount = 0.0f;
        float commission = 0.0f;
        if (colIndex == 5 || colIndex == 6 || colIndex == 7) {
            if (remitreceiptsend.getValueAt(rowIndex, 5) != null) {
                amount = (float) remitreceiptsend.getValueAt(rowIndex, 5);
            }
            if (remitreceiptsend.getValueAt(rowIndex, 6) != null) {
                commission = (float) remitreceiptsend.getValueAt(rowIndex, 6);
            }
            float total = (float) amount + (float) commission;
            remitreceiptsend.setValueAt(total, rowIndex, 7);
        }
    }//GEN-LAST:event_remitreceiptsendKeyReleased

    private void remitreceiptsendKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_remitreceiptsendKeyTyped

    }//GEN-LAST:event_remitreceiptsendKeyTyped

    private void remitreceiptsendFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_remitreceiptsendFocusLost

    }//GEN-LAST:event_remitreceiptsendFocusLost

    private void comboLedgerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboLedgerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboLedgerActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.isControlDown() && evt.getKeyChar() != 'a' && evt.getKeyCode() == 65) {
            con = Connector.getConnection();

            String type = "";
            String paymentType = "";
            if (radioButtonRS.isSelected()) {
                type = "receipt";
            } else if (jRadioButtonSent.isSelected()) {
                type = "sent";
            }

            if (radioCash.isSelected()) {
                paymentType = "cash";
            } else if (radioCredit.isSelected()) {
                paymentType = "credit";
            }
            RemitName remitNameId = (RemitName) comboRemit.getSelectedItem();
            LedgerName ledgerNameId = (LedgerName) comboLedger.getSelectedItem();

            try {
                String sqlToInsertInRemitReceiptEntry = "INSERT INTO remit_receipt_entry(vouchar_number,date_ad,date_bs,type,remit_id,ledger_id,payment_type,company_id,user_id,financial_year) VALUES(?,?,?,?,?,?,?,?,?,?)";
                stmt = con.prepareStatement(sqlToInsertInRemitReceiptEntry, Statement.RETURN_GENERATED_KEYS);
                stmt.setString(1, txtVoucharNumber.getText());
                String date = formatedDateAd.getText();
                SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                Date parsed = format.parse(date);
                java.sql.Date dateInAd = new java.sql.Date(parsed.getTime());
                stmt.setDate(2, dateInAd);

                stmt.setString(3, formatedDateBs.getText());
                stmt.setString(4, type);
                stmt.setInt(5, remitNameId.getId());
                stmt.setInt(6, ledgerNameId.getId());
                stmt.setString(7, paymentType);
                stmt.setInt(8, session.getCompanyID());
                stmt.setInt(9, session.getUserId());
                stmt.setString(10, session.getFinancialYearFrom());
                stmt.executeUpdate();
                rs = stmt.getGeneratedKeys();
                int remitHeaderId = 0;

                while (rs.next()) {
                    remitHeaderId = rs.getInt(1);
                }
                int count = remitreceiptsend.getRowCount();
                int col = remitreceiptsend.getColumnCount();

                for (int i = 0; i < count; i++) {
                    Object sn = remitreceiptsend.getValueAt(i, 0);
                    Object name = remitreceiptsend.getValueAt(i, 1);
                    Object place = remitreceiptsend.getValueAt(i, 2);
                    Object idProof = remitreceiptsend.getValueAt(i, 3);
                    Object remitId = remitreceiptsend.getValueAt(i, 4);

                    Object amount = (float) remitreceiptsend.getValueAt(i, 5);
                    Object commision = (float) remitreceiptsend.getValueAt(i, 6);
                    Object total = (float) remitreceiptsend.getValueAt(i, 7);
                    if (sn != null || name != null || place != null || idProof != null || remitId != null || amount != null || commision != null || total != null) {
                        String sqlToInsertInRemitReceiptEntryTable = "INSERT INTO remit_receipt_entry_table(remit_header_id,client_name,location,id_proof,remit_id,amount,commission,total,company_id,user_id,financial_year)VALUES(?,?,?,?,?,?,?,?,?,?,?)";
                        stmt = con.prepareStatement(sqlToInsertInRemitReceiptEntryTable);

                        stmt.setInt(1, remitHeaderId);
                        stmt.setObject(2, name);
                        stmt.setObject(3, place);
                        stmt.setObject(4, idProof);
                        stmt.setObject(5, remitId);
                        stmt.setObject(6, amount);
                        stmt.setObject(7, commision);
                        stmt.setObject(8, total);
                        stmt.setInt(9, session.getCompanyID());
                        stmt.setInt(10, session.getUserId());
                        stmt.setString(11, session.getFinancialYearFrom());
                        stmt.executeUpdate();

                    }
                    String dr_cr = "";
                    float drAmount = 0.0f;
                    float crAmount = 0.0f;
                    float balance = 0.0f;
                    if (type.equals("receipt")) {
                        drAmount = (float) total;
                        crAmount = 0.0f;
                        dr_cr = "dr";
                    } else {
                        crAmount = (float) total;
                        drAmount = 0.0f;
                        dr_cr = "cr";
                    }

                    String sqlToGetCurrentBalance = " SELECT SUM(dramount)-SUM(cramount) as balance FROM remit_ledger WHERE company_id=? and financial_year=? AND remit_id=?";
                    stmt = con.prepareStatement(sqlToGetCurrentBalance);
                    stmt.setInt(1, session.getCompanyID());
                    stmt.setString(2, session.getFinancialYearFrom());
                    stmt.setInt(3, remitNameId.getId());
                    float currentBalance = 0.0f;
                    while (rs.next()) {
                        currentBalance = rs.getFloat("balance");
                    }

                    stmt.executeQuery();

                    balance = (currentBalance + drAmount) - crAmount;
                    String sqlToInsertInRemitLedger = "INSERT INTO remit_ledger( remit_id,date_ad,date_bs,particular,lfno,vno,control_id,dramount,cramount,balance,company_id,user_id,financial_year,insert_date) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?) ";
                    stmt = con.prepareStatement(sqlToInsertInRemitLedger);
                    stmt.setInt(1, remitNameId.getId());
                    String dates = formatedDateAd.getText();
                    SimpleDateFormat formats = new SimpleDateFormat("yyyy-MM-dd");
                    Date parseds = format.parse(date);
                    java.sql.Date dateAd = new java.sql.Date(parsed.getTime());
                    stmt.setDate(2, dateAd);
                    stmt.setString(3, formatedDateBs.getText());
                    stmt.setObject(4, name);
                    stmt.setString(5, "");
                    stmt.setString(6, txtVoucharNumber.getText());
                    stmt.setObject(7, remitId);
                    stmt.setFloat(8, drAmount);
                    stmt.setFloat(9, crAmount);
                    stmt.setFloat(10, balance);
                    stmt.setInt(11, session.getCompanyID());
                    stmt.setInt(12, session.getUserId());
                    stmt.setString(13, session.getFinancialYearFrom());
                    stmt.setTimestamp(14, getCurrentTimeStamp());
                    stmt.executeUpdate();

                    String sqlToInsertInLedger = "INSERT INTO ledger(ledger_id,date_ad,date_bs,particular,lf_no,vouchar_no,dr,cr,balance,dr_cr,company_id,user_id,financial_year,entry_date)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    stmt = con.prepareStatement(sqlToInsertInLedger);
                    stmt.setInt(1, ledgerNameId.getId());
                    String dat = this.formatedDateAd.getText();
                    SimpleDateFormat formatd = new SimpleDateFormat("yyyy-MM-dd");
                    Date parsedd = format.parse(date);
                    java.sql.Date datead = new java.sql.Date(parsed.getTime());
                    stmt.setDate(2, datead);
                    stmt.setString(3, formatedDateBs.getText());
                    stmt.setObject(4, name + "(" + remitId + ")".toString());
                    stmt.setString(5, "");
                    stmt.setString(6, txtVoucharNumber.getText());
                    stmt.setFloat(7, drAmount);
                    stmt.setFloat(8, crAmount);
                    stmt.setFloat(9, balance);
                    stmt.setString(10, dr_cr);
                    stmt.setInt(11, session.getCompanyID());
                    stmt.setInt(12, session.getUserId());
                    stmt.setString(13, session.getFinancialYearFrom());
                    stmt.setTimestamp(14, getCurrentTimeStamp());
                    stmt.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Saved!!!");

                }

            } catch (SQLException ex) {
                Logger.getLogger(RemitReceiptSendEntry.class
                        .getName()).log(Level.SEVERE, null, ex);

            } catch (ParseException ex) {
                Logger.getLogger(RemitReceiptSendEntry.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_formKeyPressed

    private void txtVoucharNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVoucharNumberKeyTyped

        if (txtVoucharNumber.getText().length() >= 10) {
            evt.consume();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVoucharNumberKeyTyped

    private void txtVoucharNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVoucharNumberKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            formatedDateAd.requestFocus();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_txtVoucharNumberKeyPressed

    private void formatedDateAdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formatedDateAdKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            formatedDateBs.requestFocus();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_formatedDateAdKeyPressed

    private void formatedDateBsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formatedDateBsKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//             ButtonGroup cashGroup = new ButtonGroup();
//        cashGroup.add(radioCash);
//        cashGroup.add(radioCredit);

            ButtonGroup group = new ButtonGroup();
            group.add(radioButtonRS);
            group.add(jRadioButtonSent);
            radioButtonRS.isSelected();
            radioButtonRS.requestFocus();

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_formatedDateBsKeyPressed

    private void radioButtonRSKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_radioButtonRSKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jRadioButtonSent.requestFocus();
        }   // TODO add your handling code here:
    }//GEN-LAST:event_radioButtonRSKeyPressed

    private void jRadioButtonSentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jRadioButtonSentKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            comboRemit.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonSentKeyPressed

    private void comboRemitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboRemitKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            comboLedger.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_comboRemitKeyPressed

    private void comboLedgerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboLedgerKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            radioCash.requestFocus();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_comboLedgerKeyPressed

    private void radioCashKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_radioCashKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            radioCredit.requestFocus();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_radioCashKeyPressed

    private void radioCreditKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_radioCreditKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            remitreceiptsend.requestFocus();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_radioCreditKeyPressed

    private void jRadioButtonSentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSentActionPerformed
        String ledgerName = "";
        ledgerName(ledgerName);

// TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonSentActionPerformed

    private String ledgerName(String ledgerName) {

        try {
            con = Connector.getConnection();

            String sqlToGetLedgerName = "SELECT ledger_id ,ledger_name from ledger_info WHERE company_id='" + session.getCompanyID() + "' OR company_id=0";
            stmt = con.prepareStatement(sqlToGetLedgerName);
            rs = stmt.executeQuery();
            int ledgerId = 0;
            String ledgerNames = "";

            while (rs.next()) {
                ledgerNames = rs.getString("ledger_name");
                ledgerId = rs.getInt("ledger_id");

                comboLedger.addItem(new LedgerName(ledgerNames, ledgerId));
            }

        } catch (SQLException ex) {
            Logger.getLogger(RemitReceiptSendEntry.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return ledgerName;
    }


    private void radioCreditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioCreditActionPerformed

        String ledgerName = "";
        ledgerName(ledgerName);

    }//GEN-LAST:event_radioCreditActionPerformed

    private void radioButtonRSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonRSActionPerformed
        String ledgerName = "";
        ledgerName(ledgerName);

        // TODO add your handling code here:
    }//GEN-LAST:event_radioButtonRSActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Date;
    private javax.swing.JLabel Date1;
    private javax.swing.JLabel Date10;
    private javax.swing.JLabel Date11;
    private javax.swing.JLabel Date12;
    private javax.swing.JLabel Date13;
    private javax.swing.JLabel Date14;
    private javax.swing.JLabel Date15;
    private javax.swing.JLabel Date16;
    private javax.swing.JLabel Date2;
    private javax.swing.JLabel Date3;
    private javax.swing.JLabel Date4;
    private javax.swing.JLabel Date5;
    private javax.swing.JLabel Date6;
    private javax.swing.JLabel Date7;
    private javax.swing.JLabel Date8;
    private javax.swing.JLabel Date9;
    private javax.swing.JComboBox comboLedger;
    private javax.swing.JComboBox comboRemit;
    private javax.swing.JFormattedTextField formatedDateAd;
    private javax.swing.JFormattedTextField formatedDateBs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButtonSent;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton radioButtonRS;
    private javax.swing.JRadioButton radioCash;
    private javax.swing.JRadioButton radioCredit;
    private javax.swing.JTable remitreceiptsend;
    private javax.swing.JButton save;
    private javax.swing.JTextField txtVoucharNumber;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void fireTableCellUpdated(int row, int i) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private Object name(Object remitId) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
