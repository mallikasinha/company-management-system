/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cms;

import java.awt.*;
import java.awt.print.*;
import java.awt.event.*;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.awt.print.*;
import javax.swing.*;
import javax.swing.border.*;
import java.lang.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.*;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.OptionalInt;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mallika
 */
public class LoanAmortization extends javax.swing.JInternalFrame {

    private DefaultTableModel model;
    private PreparedStatement stmt;
    private Connection con;
    private ResultSet rs;
    private Session session;

    /**
     * Creates new form LoanAortization
     */
    public LoanAmortization(Session session) {
        initComponents();
        this.session = session;
        //  model = new DefaultTableModel();
        tableAmortization.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tableAmortization.getColumnModel().getColumn(0).setPreferredWidth(35);
        tableAmortization.getColumnModel().getColumn(1).setPreferredWidth(120);
        tableAmortization.getColumnModel().getColumn(2).setPreferredWidth(100);
        tableAmortization.getColumnModel().getColumn(3).setPreferredWidth(90);
        tableAmortization.getColumnModel().getColumn(4).setPreferredWidth(90);
        tableAmortization.getColumnModel().getColumn(6).setPreferredWidth(120);
        try {
            con = Connector.getConnection();

            String sqlToGetLedgerName = "SELECT ledger_id ,ledger_name from ledger_info where company_id='" + session.getCompanyID() + "' OR company_id=0";
            stmt = con.prepareStatement(sqlToGetLedgerName);
            rs = stmt.executeQuery();
            int ledgerId = 0;
            String ledgerName = "";
            while (rs.next()) {
                ledgerName = rs.getString("ledger_name");
                ledgerId = rs.getInt("ledger_id");

                comboLedgerName.addItem(new LedgerName(ledgerName, ledgerId));
            }
            Action buttonAction = new AbstractAction("Insert") {

                @Override
                public void actionPerformed(ActionEvent evt) {
                    String insertAmortization = "";

                    insertAmortization(insertAmortization);

                }
            };

            btnAmortization.setAction(buttonAction);

            buttonAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);

            btnAmortization.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                    KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_DOWN_MASK), btnAmortization);

            btnAmortization.getActionMap().put(btnAmortization, buttonAction);
        } catch (SQLException ex) {
            Logger.getLogger(RemitReceiptSendEntry.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        noOfPaymentPerYear = new javax.swing.JTextField();
        loanPeriodInYear = new javax.swing.JTextField();
        beginingBalance = new javax.swing.JTextField();
        rateOfInterest = new javax.swing.JTextField();
        btnAmortization = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboLedgerName = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        dateAd = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        dateBs = new javax.swing.JFormattedTextField();
        jButton1 = new javax.swing.JButton();
        btnAmortization2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableAmortization = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Loan Amount");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Loan period in year");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("No. of Payment Per Year");

        noOfPaymentPerYear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        noOfPaymentPerYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfPaymentPerYearActionPerformed(evt);
            }
        });
        noOfPaymentPerYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                noOfPaymentPerYearKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                noOfPaymentPerYearKeyTyped(evt);
            }
        });

        loanPeriodInYear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        loanPeriodInYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loanPeriodInYearActionPerformed(evt);
            }
        });
        loanPeriodInYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                loanPeriodInYearKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                loanPeriodInYearKeyTyped(evt);
            }
        });

        beginingBalance.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        beginingBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beginingBalanceActionPerformed(evt);
            }
        });
        beginingBalance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                beginingBalanceKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                beginingBalanceKeyTyped(evt);
            }
        });

        rateOfInterest.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rateOfInterest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rateOfInterestActionPerformed(evt);
            }
        });
        rateOfInterest.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rateOfInterestKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rateOfInterestKeyTyped(evt);
            }
        });

        btnAmortization.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAmortization.setText("Amortization");
        btnAmortization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAmortizationActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Interest Rate");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Ledger Name:");

        comboLedgerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboLedgerNameKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Starting Date:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("A.D");

        dateAd.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        dateAd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateAdActionPerformed(evt);
            }
        });
        dateAd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dateAdKeyPressed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("B.S");

        dateBs.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        dateBs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateBsActionPerformed(evt);
            }
        });
        dateBs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dateBsKeyPressed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnAmortization2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAmortization2.setText("Clear form");
        btnAmortization2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAmortization2ActionPerformed(evt);
            }
        });

        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setText("*");

        jLabel10.setForeground(new java.awt.Color(255, 0, 0));
        jLabel10.setText("*");

        jLabel11.setForeground(new java.awt.Color(255, 0, 0));
        jLabel11.setText("*");

        jLabel12.setForeground(new java.awt.Color(255, 0, 0));
        jLabel12.setText("*");

        jLabel13.setForeground(new java.awt.Color(255, 0, 0));
        jLabel13.setText("*");

        jLabel14.setForeground(new java.awt.Color(255, 0, 0));
        jLabel14.setText("*");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateAd)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(noOfPaymentPerYear, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(loanPeriodInYear, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(comboLedgerName, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(rateOfInterest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(beginingBalance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateBs)))
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAmortization)
                                .addGap(56, 56, 56)
                                .addComponent(btnAmortization2))
                            .addComponent(jButton1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(dateAd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(dateBs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(beginingBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel11))
                            .addComponent(rateOfInterest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel12))
                            .addComponent(loanPeriodInYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(noOfPaymentPerYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(comboLedgerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addGap(18, 18, 18)
                        .addComponent(btnAmortization))
                    .addComponent(btnAmortization2))
                .addGap(28, 28, 28)
                .addComponent(jButton1)
                .addContainerGap(151, Short.MAX_VALUE))
        );

        tableAmortization.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S.n", "Date of payment", "Loan Amount", "Payement", "Interest", "Principal", "Ending balance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableAmortization);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 291, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void noOfPaymentPerYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfPaymentPerYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfPaymentPerYearActionPerformed

    private void loanPeriodInYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loanPeriodInYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loanPeriodInYearActionPerformed

    private void beginingBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginingBalanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_beginingBalanceActionPerformed

    private void rateOfInterestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rateOfInterestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rateOfInterestActionPerformed
    private String insertAmortization(String amortization) {
         try {
 String validateDate = dateAd.getText();
            String validateDatebs = dateBs.getText();
            String validateBeginingBalance = beginingBalance.getText();
            String validateRateofInterest = rateOfInterest.getText();
            String validateloanPeriodInYear = loanPeriodInYear.getText();
            String validatenoOfPayment = noOfPaymentPerYear.getText();

            if (("".equals(validateDate) && "".equals(validateDatebs) && "".equals(validateBeginingBalance) && "".equals(validateRateofInterest) && "".equals(validateloanPeriodInYear) && "".equals(validatenoOfPayment))) {
                JOptionPane.showMessageDialog(null, "please enter al the required field");

            }  else {
       
            DefaultTableModel model = (DefaultTableModel) tableAmortization.getModel();
            int rowCounter = 0;

            int numberOfRows = tableAmortization.getRowCount();
            if (tableAmortization.getRowCount() > 0) {
                for (rowCounter = 0; rowCounter <= numberOfRows; rowCounter++) {
                    model.removeRow(rowCounter / numberOfRows);

                }

            }

            int rateOfInterests = Integer.parseInt(rateOfInterest.getText());
            int numberOfYears = Integer.parseInt(noOfPaymentPerYear.getText());
            float loanAmount = Float.parseFloat(beginingBalance.getText());
            int noOfPaymentperYear = Integer.parseInt(noOfPaymentPerYear.getText());
            // for Calculating Target Date
            String date = dateAd.getText();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            Date parsed = format.parse(date);
            java.sql.Date loanDateInAD = new java.sql.Date(parsed.getTime());
            Date loanStartDate = loanDateInAD;

            String[] loanStartDateInArray = date.split("-");
            int loanStartYear = Integer.parseInt(loanStartDateInArray[0]);
            int loanStartMonth = Integer.parseInt(loanStartDateInArray[1]);
            int loanStartDay = Integer.parseInt(loanStartDateInArray[2]);
            int targetedPeriodInDays = 0;
            Map<Integer, Integer> monthAndDate = new HashMap<Integer, Integer>() {
                {

                    put(1, 31);
                    put(2, 28);
                    put(3, 31);
                    put(4, 30);
                    put(5, 31);
                    put(6, 30);
                    put(7, 31);
                    put(8, 31);
                    put(9, 30);
                    put(10, 31);
                    put(11, 30);
                    put(12, 31);
                }
            };
            Map<Integer, Integer> monthAndDateInLeapYear = new HashMap<Integer, Integer>() {
                {

                    put(1, 31);
                    put(2, 29);
                    put(3, 31);
                    put(4, 30);
                    put(5, 31);
                    put(6, 30);
                    put(7, 31);
                    put(8, 31);
                    put(9, 30);
                    put(10, 31);
                    put(11, 30);
                    put(12, 31);
                }

            };

//
            float rateOfInterestPerPeriod = (Float.parseFloat(rateOfInterest.getText())) / (noOfPaymentperYear * 100);
            float noOfYear = (Float.parseFloat(loanPeriodInYear.getText())) * (Float.parseFloat(noOfPaymentPerYear.getText()));

            float payement = 0.02f;

            payement = (float) (loanAmount * ((rateOfInterestPerPeriod * Math.pow((1 + rateOfInterestPerPeriod), noOfYear)) / (Math.pow((1 + rateOfInterestPerPeriod), noOfYear) - 1)));
            float roundOffPayement = (float) Math.round(payement * 100) / 100;
            float roundOffLoanAmount = 0.00f;
            float interestAmount = 0.0f;
            float principal = 0.0f;
            float endingBalance = 0.0f;
            int loanPeriodInYears = 0;
          
                LedgerName ledgerNameId = (LedgerName) comboLedgerName.getSelectedItem();
                con = Connector.getConnection();
                String sqlToInsertIntoLoanAmortizationHeader = "INSERT INTO loan_amortization_header(date_ad,date_bs,loan_amount,interest_rate,loan_period_in_year,no_of_payment_per_year,ledger_id,company_id,user_id,financial_year,insert_date)VALUES(?,?,?,?,?,?,?,?,?,?,?)";
                stmt = con.prepareStatement(sqlToInsertIntoLoanAmortizationHeader, Statement.RETURN_GENERATED_KEYS);
                stmt.setDate(1, loanDateInAD);
                stmt.setString(2, dateBs.getText());
                stmt.setFloat(3, loanAmount);
                stmt.setInt(4, rateOfInterests);
                stmt.setInt(5, (Integer.parseInt(loanPeriodInYear.getText())));
                stmt.setInt(6, noOfPaymentperYear);
                stmt.setInt(7, ledgerNameId.getId());
                stmt.setInt(8, session.getCompanyID());
                stmt.setInt(9, session.getUserId());
                stmt.setString(10, session.getFinancialYearFrom());
                stmt.setTimestamp(11, getCurrentTimeStamp());
                stmt.executeUpdate();
                rs = stmt.getGeneratedKeys();
                int loanAmortizationHeaderId = 0;
                if (rs.next()) {
                    loanAmortizationHeaderId = rs.getInt(1);
                }

                String dr_cr = "";

                float cr = 0.0f;
                float currentBalance = 0.0f;
                float newBalance = 0.0f;
                String particular = "loan";
                dr_cr = "Dr";
                float dr = loanAmount;

                String sqlToCalculateBalance = "SELECT SUM(dr)-SUM(cr) AS `currentbalance` from ledger WHERE ledger_id=? AND financial_year=? AND company_id=?";
                stmt = con.prepareStatement(sqlToCalculateBalance);
                stmt.setInt(1, ledgerNameId.getId());
                stmt.setString(2, session.getFinancialYearFrom());
                stmt.setInt(3, session.getCompanyID());
                stmt.executeQuery();
                rs = stmt.getResultSet();
                while (rs.next()) {
                    currentBalance = rs.getFloat("currentbalance");
                }
                newBalance = currentBalance + (float) dr - (float) cr;

                String sqlToInsertIntoLedger = "INSERT INTO ledger(ledger_id,date_ad,date_bs,particular,lf_no,vouchar_no,dr,cr,balance,dr_cr,company_id,user_id,financial_year,entry_date)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                stmt = con.prepareStatement(sqlToInsertIntoLedger);
                stmt.setInt(1, ledgerNameId.getId());
                stmt.setDate(2, loanDateInAD);
                stmt.setString(3, dateBs.getText());
                stmt.setString(4, particular);
                stmt.setString(5, null);
                stmt.setString(6, null);
                stmt.setFloat(7, loanAmount);
                stmt.setFloat(8, cr);
                stmt.setFloat(9, newBalance);
                stmt.setString(10, dr_cr);
                stmt.setInt(11, session.getCompanyID());
                stmt.setInt(12, session.getUserId());
                stmt.setString(13, session.getFinancialYearFrom());
                stmt.setTimestamp(14, getCurrentTimeStamp());
                stmt.executeUpdate();
                for (int i = 0; i < noOfYear; i++) {
                    targetedPeriodInDays = (int) 365 / noOfPaymentperYear;

                    while (targetedPeriodInDays > 0) {

                        boolean leapYear = checkLeapYear(loanStartYear);
                        if (leapYear == true) {
                            Integer daysInIncomingMonth = monthAndDateInLeapYear.get(loanStartMonth);
                            Integer remainingDaysInThatMonth = daysInIncomingMonth - loanStartDay;
                            loanStartMonth = loanStartMonth + 1;
                            if (loanStartMonth > 12) {
                                loanStartYear = loanStartYear + 1;

                                loanStartMonth = loanStartMonth - 12;
                            }
                            targetedPeriodInDays = targetedPeriodInDays - remainingDaysInThatMonth;

                            if (targetedPeriodInDays <= monthAndDateInLeapYear.get(loanStartMonth)) {
                                loanStartDay = targetedPeriodInDays;
                                targetedPeriodInDays = 0;
                            } else {

                                targetedPeriodInDays = targetedPeriodInDays - monthAndDateInLeapYear.get(loanStartMonth);
                                loanStartDay = monthAndDateInLeapYear.get(loanStartMonth);

                            }
                        } else {
//
                            Integer daysInIncomingMonth = monthAndDate.get(loanStartMonth);
                            Integer remainingDaysInThatMonth = daysInIncomingMonth - loanStartDay;
                            loanStartMonth = loanStartMonth + 1;

                            if (loanStartMonth > 12) {
                                loanStartYear = loanStartYear + 1;
                                loanStartMonth = loanStartMonth - 12;
                            }
                            targetedPeriodInDays = targetedPeriodInDays - remainingDaysInThatMonth;

                            if (targetedPeriodInDays <= monthAndDate.get(loanStartMonth)) {
                                loanStartDay = targetedPeriodInDays;
                                targetedPeriodInDays = 0;

                            } else {
                                targetedPeriodInDays = targetedPeriodInDays - monthAndDate.get(loanStartMonth);
                                loanStartDay = monthAndDate.get(loanStartMonth);
                            }
                        }
                    }

//               String loanStartDate = ;
                    SimpleDateFormat finalTargetdDateFormated = new SimpleDateFormat("yyyy-MM-dd");
                    Date convertingFinalTargetedDate = finalTargetdDateFormated.parse(loanStartYear + "-" + loanStartMonth + "-" + loanStartDay);
                    java.sql.Date finalTargetDate = new java.sql.Date(convertingFinalTargetedDate.getTime());
                    loanStartDate = finalTargetDate;

                    if (i == 0) {
                        loanAmount = Float.parseFloat(beginingBalance.getText());
                        roundOffLoanAmount = (float) Math.round(loanAmount * 100) / 100;

                    } else {
                        loanAmount = endingBalance;
                        roundOffLoanAmount = (float) Math.round(loanAmount * 100) / 100;

                    }

                    interestAmount = (float) (loanAmount * rateOfInterestPerPeriod);
                    float roundOffInterestAmount = (float) Math.round(interestAmount * 100) / 100;

                    principal = (float) (roundOffPayement - interestAmount);
                    float roundOffPrincipal = (float) Math.round(principal * 100) / 100;

                    endingBalance = (float) (loanAmount - principal);
                    float roundOffEndingBalance = (float) Math.round(endingBalance * 100) / 100;
                    if (i == noOfYear - 1) {
                        roundOffEndingBalance = 0.0f;
                        roundOffPrincipal = roundOffEndingBalance + roundOffPrincipal;
                    }

                    model.addRow(new Object[]{i + 1, loanStartDate, roundOffLoanAmount, roundOffPayement, roundOffInterestAmount, roundOffPrincipal, roundOffEndingBalance});
                    tableAmortization.setModel(model);

                    String sqlToInsertIntoLoanAmortization = "INSERT INTO loan_amortization(loan_amortization_header_id,target_date_ad,target_date_bs,loan_amount,payment,interest,principal_amount,ending_balance,user_id,company_id,financial_year) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
                    stmt = con.prepareStatement(sqlToInsertIntoLoanAmortization);
                    stmt.setInt(1, loanAmortizationHeaderId);
                    stmt.setDate(2, finalTargetDate);
                    stmt.setString(3, dateBs.getText());

                    stmt.setFloat(4, roundOffLoanAmount);
                    stmt.setFloat(5, roundOffPayement);
                    stmt.setFloat(6, roundOffInterestAmount);
                    stmt.setFloat(7, roundOffPrincipal);
                    stmt.setFloat(8, roundOffEndingBalance);
                    stmt.setInt(9, session.getUserId());
                    stmt.setInt(10, session.getCompanyID());
                    stmt.setString(11, session.getFinancialYearFrom());
                    stmt.executeUpdate();

                }

            }
            dateAd.setText("");
            dateBs.setText("");
            beginingBalance.setText("");
            rateOfInterest.setText("");
            loanPeriodInYear.setText("");
            noOfPaymentPerYear.setText("");
        } catch (ParseException ex) {
            Logger.getLogger(LoanAmortization.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(LoanAmortization.class.getName()).log(Level.SEVERE, null, ex);
        }

        return amortization;
    }
    private void btnAmortizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAmortizationActionPerformed
        String amortization = "";

        insertAmortization(amortization);


    }//GEN-LAST:event_btnAmortizationActionPerformed

    private void dateBsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateBsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateBsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String ledgerName = comboLedgerName.getSelectedItem().toString();

//            
        MessageFormat header = new MessageFormat("LedgerName:" + ledgerName + "\t" + "\t" + "Loan Start Date:" + dateAd.getText() + "\n" + "\n" + "Interest Rate:" + rateOfInterest.getText() + "\t" + "\t" + "Loan Period:" + loanPeriodInYear.getText());
        MessageFormat footer = new MessageFormat("Page{0,number,integer}");
        try {
            tableAmortization.print(JTable.PrintMode.NORMAL, header, footer);

        } catch (PrinterException ex) {
            Logger.getLogger(LoanAmortization.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
//            }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAmortization2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAmortization2ActionPerformed
        dateAd.setText("");
        dateBs.setText("");
        beginingBalance.setText("");
        rateOfInterest.setText("");
        loanPeriodInYear.setText("");
        noOfPaymentPerYear.setText("");

    }//GEN-LAST:event_btnAmortization2ActionPerformed

    private void dateAdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateAdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateAdActionPerformed

    private void dateAdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateAdKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            dateBs.requestFocus();
        }
    }//GEN-LAST:event_dateAdKeyPressed

    private void dateBsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateBsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            beginingBalance.requestFocus();
        }  // TODO add your handling code here:
    }//GEN-LAST:event_dateBsKeyPressed

    private void beginingBalanceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_beginingBalanceKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rateOfInterest.requestFocus();
        }
    }//GEN-LAST:event_beginingBalanceKeyPressed

    private void rateOfInterestKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rateOfInterestKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            loanPeriodInYear.requestFocus();
        }

// TODO add your handling code here:
    }//GEN-LAST:event_rateOfInterestKeyPressed

    private void loanPeriodInYearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loanPeriodInYearKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            noOfPaymentPerYear.requestFocus();
        }    // TODO add your handling code here:
    }//GEN-LAST:event_loanPeriodInYearKeyPressed

    private void noOfPaymentPerYearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noOfPaymentPerYearKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            comboLedgerName.requestFocus();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfPaymentPerYearKeyPressed

    private void comboLedgerNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboLedgerNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnAmortization.requestFocus();
        } // TODO add your handling code here:
    }//GEN-LAST:event_comboLedgerNameKeyPressed

    private void beginingBalanceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_beginingBalanceKeyTyped
        char c = evt.getKeyChar();
        if (!((c >= '0') && (c <= '9')
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE)) || beginingBalance.getText().length() >= 15) {
            getToolkit().beep();
            evt.consume();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_beginingBalanceKeyTyped

    private void rateOfInterestKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rateOfInterestKeyTyped
        char c = evt.getKeyChar();
        if (!((c >= '0') && (c <= '9')
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE)) || rateOfInterest.getText().length() >= 15) {
            getToolkit().beep();
            evt.consume();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_rateOfInterestKeyTyped

    private void loanPeriodInYearKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loanPeriodInYearKeyTyped
        char c = evt.getKeyChar();
        if (!((c >= '0') && (c <= '9')
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE)) || loanPeriodInYear.getText().length() >= 15) {
            getToolkit().beep();
            evt.consume();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_loanPeriodInYearKeyTyped

    private void noOfPaymentPerYearKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noOfPaymentPerYearKeyTyped
        char c = evt.getKeyChar();
        if (!((c >= '0') && (c <= '9')
                || (c == KeyEvent.VK_BACK_SPACE)
                || (c == KeyEvent.VK_DELETE)) || noOfPaymentPerYear.getText().length() >= 15) {
            getToolkit().beep();
            evt.consume();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfPaymentPerYearKeyTyped

    private boolean checkLeapYear(int yearInInt) {
        if (yearInInt % 4 != 0) {
            return true;
        } else if (yearInInt % 4 == 0 || yearInInt
                % 100 != 0) {
            return true;

        } else if (yearInInt % 4 == 0 || yearInInt
                % 100 == 0 || yearInInt
                % 400 == 0) {
            return true;

        } else {
            return false;
        }
    }

    private static java.sql.Timestamp getCurrentTimeStamp() {

        java.util.Date today = new java.util.Date();
        return new java.sql.Timestamp(today.getTime());

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField beginingBalance;
    private javax.swing.JButton btnAmortization;
    private javax.swing.JButton btnAmortization2;
    private javax.swing.JComboBox comboLedgerName;
    private javax.swing.JFormattedTextField dateAd;
    private javax.swing.JFormattedTextField dateBs;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField loanPeriodInYear;
    private javax.swing.JTextField noOfPaymentPerYear;
    private javax.swing.JTextField rateOfInterest;
    private javax.swing.JTable tableAmortization;
    // End of variables declaration//GEN-END:variables

}
